#!/usr/bin/env python2.7
#
# $File: vtools $
# $LastChangedDate: 2011-06-16 20:10:41 -0500 (Thu, 16 Jun 2011) $
# $Rev: 4234 $
#
# This file is part of variant_tools, a software application to annotate,
# summarize, and filter variants for next-gen sequencing ananlysis.
# Please visit http://variant_tools.sourceforge.net # for details.
#
# Copyright (C) 2004 - 2010 Bo Peng (bpeng@mdanderson.org)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

import argparse

from variant_tools import project
from variant_tools import importer
from variant_tools import sample
from variant_tools import liftOver
from variant_tools import annotation
from variant_tools import variant

def addVerbosityArg(parser):
    parser.add_argument('-v', '--verbosity', choices=['0','1','2'],
        help='Output error and warning (0), info (1) and debug (2) information.')

if __name__ == '__main__':
    #
    master_parser = argparse.ArgumentParser(description='''A variant annotation and processing tool
        for next-gen sequencing studies.''',
        prog='vtools',
        #formatter_class=argparse.RawDescriptionHelpFormatter,
        fromfile_prefix_chars='@',  
        epilog='''Use 'vtools.py cmd -h' for details about each command.
        Please contact Bo Peng (bpeng at mdanderson.org) if you have any question.''')
    master_parser.add_argument('--version', action='version', version='%(prog)s 1.0')
    subparsers = master_parser.add_subparsers(title='subcommands')
    #
    # command init
    parser = subparsers.add_parser('init', help='Create a project',
        # FIXME: we should add descriptions to other commands as well.
        description='''Create an empty project in the current directory. This
        command will fail if another project already exists in this directory,
        unless option '--force' is used to remove the existing project.''')
    project.initArguments(parser)
    addVerbosityArg(parser)
    parser.set_defaults(func=project.init)
    #
    # command remove
    parser = subparsers.add_parser('remove', help='Remove project or its contents.')
    project.removeArguments(parser)
    addVerbosityArg(parser)
    parser.set_defaults(func=project.remove)
    #
    # command info
    parser = subparsers.add_parser('show', help='Display content of a project')
    project.showArguments(parser)
    addVerbosityArg(parser)
    parser.set_defaults(func=project.show)
    #
    # command run
    parser = subparsers.add_parser('execute', help='Execute arbitrary SQL statement.')
    project.executeArguments(parser)
    addVerbosityArg(parser)
    parser.set_defaults(func=project.execute)
    #
    # command liftover
    parser = subparsers.add_parser('liftover',
        help='''Set alternative reference genome and update alternative coordinates
            of all variant tables.''')
    liftOver.liftOverArguments(parser)
    addVerbosityArg(parser)
    parser.set_defaults(func=liftOver.liftOver)
    #
    # command import_vcf
    parser = subparsers.add_parser('import_vcf',
        help='Import regular or compressed vcf (version 4.0) files')
    importer.importVCFArguments(parser)
    addVerbosityArg(parser)
    parser.set_defaults(func=importer.importVCF)
    # 
    # command import_txt
    parser = subparsers.add_parser('import_txt',
        help='Import variants from files in tab (or comma) separated value formats',
        description='''Import variants from one or more tab or comma separated files.
            This command can be used to import variants to a new project (without sample), or
            create a variant table from a list of variants for further analysis. ''')
    importer.importTxtArguments(parser)
    addVerbosityArg(parser)
    parser.set_defaults(func=importer.importTxt)
    # 
    # command import_phenotype
    parser = subparsers.add_parser('import_phenotype', help='Import sample phenotype')
    sample.importPhenotypeArguments(parser)
    addVerbosityArg(parser)
    parser.set_defaults(func=sample.importPhenotype)
    #
    # command add_field
    parser = subparsers.add_parser('add_field',
        help='''Import property of variants from a comma or tab separated file, which
            can be annotation for nucleotide locations or variants, or arbitrary fields
            of a project (e.g. gene).''')
    variant.addFieldArguments(parser)
    addVerbosityArg(parser)
    parser.set_defaults(func=variant.addField)
    #
    # command sample_stat
    parser = subparsers.add_parser('sample_stat',
        help='Calculate sample statistics (count, frequency etc) for all or selected samples.')
    sample.sampleStatArguments(parser)
    addVerbosityArg(parser)
    parser.set_defaults(func=sample.sampleStat)
    #
    # command use
    parser = subparsers.add_parser('use',
        help='Prepare (download or import if necessary) and use an annotation database.')
    annotation.useArguments(parser)
    addVerbosityArg(parser)
    parser.set_defaults(func=annotation.use)
    #
    # command exclude
    parser = subparsers.add_parser('exclude',
        help='''Output or save variants after excluding variants that match specified conditions''')
    variant.excludeArguments(parser)
    variant.generalOutputArguments(parser)
    addVerbosityArg(parser)
    parser.set_defaults(func=variant.exclude)
    #
    # command select
    parser = subparsers.add_parser('select',
        help='''Output or save select variants that match specified conditions''')
    variant.selectArguments(parser)
    variant.generalOutputArguments(parser)
    addVerbosityArg(parser)
    parser.set_defaults(func=variant.select)
    #
    # command output
    parser = subparsers.add_parser('output',
        help='Output variants in tab or comma separated format.')
    variant.outputArguments(parser)
    variant.generalOutputArguments(parser)
    addVerbosityArg(parser)
    parser.set_defaults(func=variant.output)
    #
    # command compare
    parser = subparsers.add_parser('compare',
        help='''Compare two variant tables, count or output 
            intersect and difference to other tables''')
    variant.compareArguments(parser)
    variant.generalOutputArguments(parser)
    addVerbosityArg(parser)
    parser.set_defaults(func=variant.compare)
    #
    # command export_vcf (pending)
    parser = subparsers.add_parser('export_vcf', help='Export vcf files')
    importer.exportVCFArguments(parser)
    addVerbosityArg(parser)
    parser.set_defaults(func=importer.exportVCF)
    #
    # getting args
    args = master_parser.parse_args()
    # calling the associated functions
    args.func(args)


