#!/usr/bin/env python2.7
#
# $File: vtools $
# $LastChangedDate: 2011-06-16 20:10:41 -0500 (Thu, 16 Jun 2011) $
# $Rev: 4234 $
#
# This file is part of variant_tools, a software application to annotate,
# summarize, and filter variants for next-gen sequencing ananlysis.
# Please visit http://varianttools.sourceforge.net for details.
#
# Copyright (C) 2011 Bo Peng (bpeng@mdanderson.org)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

import sys
try:
    import argparse
except ImportError:
    sys.exit('variant tools requires Python 2.7.2 or higher, or Python 3.2 or higher. Please upgrade your version (%s) of Python and try again.' % (sys.version.split()[0]))

from variant_tools import project
from variant_tools import importer
from variant_tools import phenotype
from variant_tools import liftOver
from variant_tools import annotation
from variant_tools import variant
from variant_tools import exporter
try:
    from variant_tools import association
    with_association = True
except (ImportError, AttributeError):
    with_association = False

def addCommonArgs(parser):
    parser.add_argument('-v', '--verbosity', metavar='STD[LOG]',
        help='''Output error and warning (0), info (1) and debug (2) information
            to standard output (default to 1), and to a logfile (default to 2).'''),
    #parser.add_argument('-j', '--jobs', metavar='N', default=4, type=int,
    #    help='''Allow at most N concurrent jobs.''')

if __name__ == '__main__':
    #
    master_parser = argparse.ArgumentParser(description='''A variant processing, annotation and analysis tool
        for next-generation sequencing studies.''',
        prog='variant tools',
        #formatter_class=argparse.RawDescriptionHelpFormatter,
        fromfile_prefix_chars='@',  
        epilog='''Use 'vtools cmd -h' for details about each command.
        Please contact Bo Peng (bpeng at mdanderson.org) if you have any question.''')
    master_parser.add_argument('--version', action='version', version='%(prog)s {}'.format(project.VTOOLS_FULL_VERSION))
    subparsers = master_parser.add_subparsers(title='subcommands')
    #
    # command init
    parser = subparsers.add_parser('init', help='''Create a new project, or a subproject 
        from an existing parent project, or merge several existing projects into one''',
        # FIXME: we should add descriptions to other commands as well.
        description='''Create a new project in the current directory. This
        command will fail if another project already exists in this directory,
        unless option '--force' is used to remove the existing project.''')
    project.initArguments(parser)
    addCommonArgs(parser)
    parser.set_defaults(func=project.init)
    #
    # command import
    parser = subparsers.add_parser('import',
        help='Import variants and related sample genotype from files in specified formats',
        description='''Import variants and related sample genotype from one or more
            delimiter separated files (e.g. VCF and a number of indel formats).''')
    importer.importVariantsArguments(parser)
    addCommonArgs(parser)
    parser.set_defaults(func=importer.importVariants)
    # 
    # command phenotype
    parser = subparsers.add_parser('phenotype', help='Manage sample phenotypes',
        description='''Import phenotypes from a file, or set phenotypes to constants, 
            or to summary statistics of sample genotype fields.''')
    phenotype.phenotypeArguments(parser)
    addCommonArgs(parser)
    parser.set_defaults(func=phenotype.phenotype)
    #
    # command show
    parser = subparsers.add_parser('show', help='Display content of a project')
    project.showArguments(parser)
    addCommonArgs(parser)
    parser.set_defaults(func=project.show)
    #
    # command liftover
    parser = subparsers.add_parser('liftover',
        help='''Set alternative reference genome and update alternative coordinates
            of all variant tables''',
        description='''Convert coordinates of existing variants to alternative 
            coordinates in an alternative reference genome. The UCSC liftover
            tool will be automatically downloaded if it is not available.''')
    liftOver.liftOverArguments(parser)
    addCommonArgs(parser)
    parser.set_defaults(func=liftOver.liftOver)
    #
    # command use
    parser = subparsers.add_parser('use',
        help='Prepare (download or import if necessary) and use an annotation database')
    annotation.useArguments(parser)
    addCommonArgs(parser)
    parser.set_defaults(func=annotation.use)
    #
    # command update
    parser = subparsers.add_parser('update',
        help='Add or update fields of existing variants and genotype using information from specified existing fields, sample genotype, or external files',
        description='''Add or update fields of existing variants and genotype from other fields,
            statistics of genotypes and genotype info, or files that annotate variants or their
            locations (e.g. Read annotation from ANNOVAR output files, import additional variant
            or genotype fields from .vcf files).''')
    importer.updateArguments(parser)
    addCommonArgs(parser)
    parser.set_defaults(func=importer.update)
    #
    # command select
    parser = subparsers.add_parser('select',
        help='''Output or save select variants that match specified conditions''')
    variant.selectArguments(parser)
    variant.generalOutputArguments(parser)
    addCommonArgs(parser)
    parser.set_defaults(func=variant.select)
    #
    # command exclude
    parser = subparsers.add_parser('exclude',
        help='''Output or save variants after excluding variants that match specified conditions''')
    variant.excludeArguments(parser)
    variant.generalOutputArguments(parser)
    addCommonArgs(parser)
    parser.set_defaults(func=variant.exclude)
    #
    # command compare
    parser = subparsers.add_parser('compare',
        help='''Compare two variant tables, count or output 
            intersect and difference to other tables''')
    variant.compareArguments(parser)
    addCommonArgs(parser)
    parser.set_defaults(func=variant.compare)
    #
    # command output
    parser = subparsers.add_parser('output',
        help='Output variants in tab or comma separated format')
    variant.outputArguments(parser)
    variant.generalOutputArguments(parser)
    addCommonArgs(parser)
    parser.set_defaults(func=variant.output)
    #
    # command export
    parser = subparsers.add_parser('export',
        help='Export samples (variants and genotypes) in specified format')
    exporter.exportArguments(parser)
    addCommonArgs(parser)
    parser.set_defaults(func=exporter.export)
    #
    # command remove
    parser = subparsers.add_parser('remove', help='Remove project or its contents (entries, tables, fields, etc.)')
    project.removeArguments(parser)
    addCommonArgs(parser)
    parser.set_defaults(func=project.remove)
    #
    # command merge
    #parser = subparsers.add_parser('merge',
    #    help='Merge variants and genotypes from other projects',
    #    description='''Merge variants and samples from specified projects that use the
    #    same reference genomes. Variant info fields that do not exist in the current
    #    project and samples that already exist in the project will be ignored.''')
    #project.mergeArguments(parser)
    #addCommonArgs(parser)
    #parser.set_defaults(func=project.merge)
    #
    # command associate
    #
    # This command is not ready and will not be displayed in a formal release
    if with_association:
        parser = subparsers.add_parser('associate',
            help='''Test association between variants and phenotypes''',
            description='''Call one or more statistical association tests and
            return test results as fields to variants tested.''')
        association.associateArguments(parser)
        addCommonArgs(parser)
        parser.set_defaults(func=association.associate)
    #
    # command execute
    parser = subparsers.add_parser('execute', help='Execute arbitrary SQL statement')
    project.executeArguments(parser)
    addCommonArgs(parser)
    parser.set_defaults(func=project.execute)
    #
    # getting args, some commands accept arbitrary arguments so we need to
    # separate them into argv
    args, argv = master_parser.parse_known_args()
    # only command associate and sample_stat accept arbitrary parameter
    if (with_association and args.func == association.associate) or \
        (args.func in [project.init, importer.importVariants, importer.update, exporter.export, annotation.use]):
        args.unknown_args = argv
    elif len(argv) > 0:
        master_parser.print_usage(sys.stderr)
        sys.exit('vtools: error: unrecognized arguments: ' + ' '.join(argv))
    # calling the associated functions
    args.func(args)


