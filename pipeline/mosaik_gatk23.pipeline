# Copyright (C) 2011 - 2013 Bo Peng (bpeng@mdanderson.org)
# Distributed under GPL. see <http://www.gnu.org/licenses/>
#
# Please refer to http://varianttools.sourceforge.net/Pipeline/New for
# a description of the format of this file.

[pipeline description]
description=A pipeline to call genetic variants from fastq files using 
	Mosaik-aligner and GATK best practice. It uses hg19 of human reference
	genome and assumes paired-end reads in plain text and compressed formats.
	It also accepts bam/sam files as input, in which case raw reads will be
	extracted and re-aligned. Reduced bam files will be generated if there
	are multiple output files in the align step. 

# Check the following URL for documentation of the Mosaik tools
# https://code.google.com/p/mosaik-aligner/downloads/detail?name=Mosaik%201.0%20Documentation.pdf

#
# resource_directory is set to ~/.variant_tools/pipeline_resource/gatk23_hg19
resource_dir=gatk23_hg19
# resources are downloaded from ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/*
# the .gz files will be automatically decompressed
resource=ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/1000G_omni2.5.hg19.vcf.gz
  ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/1000G_omni2.5.hg19.vcf.gz.md5
  ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/1000G_omni2.5.hg19.vcf.idx.gz
  ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/1000G_omni2.5.hg19.vcf.idx.gz.md5
  ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/1000G_phase1.indels.hg19.vcf.gz
  ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/1000G_phase1.indels.hg19.vcf.gz.md5
  ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/1000G_phase1.indels.hg19.vcf.idx.gz
  ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/1000G_phase1.indels.hg19.vcf.idx.gz.md5
  ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/CEUTrio.HiSeq.WGS.b37.bestPractices.phased.hg19.vcf.gz
  ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/CEUTrio.HiSeq.WGS.b37.bestPractices.phased.hg19.vcf.gz.md5
  ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/CEUTrio.HiSeq.WGS.b37.bestPractices.phased.hg19.vcf.idx.gz
  ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/CEUTrio.HiSeq.WGS.b37.bestPractices.phased.hg19.vcf.idx.gz.md5
  ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/dbsnp_137.hg19.excluding_sites_after_129.vcf.gz
  ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/dbsnp_137.hg19.excluding_sites_after_129.vcf.gz.md5
  ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/dbsnp_137.hg19.excluding_sites_after_129.vcf.idx.gz
  ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/dbsnp_137.hg19.excluding_sites_after_129.vcf.idx.gz.md5
  ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/dbsnp_137.hg19.vcf.gz
  ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/dbsnp_137.hg19.vcf.gz.md5
  ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/dbsnp_137.hg19.vcf.idx.gz
  ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/dbsnp_137.hg19.vcf.idx.gz.md5
  ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/hapmap_3.3.hg19.vcf.gz
  ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/hapmap_3.3.hg19.vcf.gz.md5
  ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/hapmap_3.3.hg19.vcf.idx.gz
  ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/hapmap_3.3.hg19.vcf.idx.gz.md5
  ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/Mills_and_1000G_gold_standard.indels.hg19.vcf.gz
  ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/Mills_and_1000G_gold_standard.indels.hg19.vcf.gz.md5
  ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/Mills_and_1000G_gold_standard.indels.hg19.vcf.idx.gz
  ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/Mills_and_1000G_gold_standard.indels.hg19.vcf.idx.gz.md5
  ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/NA12878.HiSeq.WGS.bwa.cleaned.raw.subset.hg19.sites.vcf.gz
  ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/NA12878.HiSeq.WGS.bwa.cleaned.raw.subset.hg19.sites.vcf.gz.md5
  ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/NA12878.HiSeq.WGS.bwa.cleaned.raw.subset.hg19.sites.vcf.idx.gz
  ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/NA12878.HiSeq.WGS.bwa.cleaned.raw.subset.hg19.sites.vcf.idx.gz.md5
  ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/NA12878.HiSeq.WGS.bwa.cleaned.raw.subset.hg19.vcf.gz
  ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/NA12878.HiSeq.WGS.bwa.cleaned.raw.subset.hg19.vcf.gz.md5
  ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/NA12878.HiSeq.WGS.bwa.cleaned.raw.subset.hg19.vcf.idx.gz
  ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/NA12878.HiSeq.WGS.bwa.cleaned.raw.subset.hg19.vcf.idx.gz.md5
  ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/ucsc.hg19.dict.gz
  ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/ucsc.hg19.dict.gz.md5
  ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/ucsc.hg19.fasta.fai.gz
  ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/ucsc.hg19.fasta.fai.gz.md5
  ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/ucsc.hg19.fasta.gz
  ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/ucsc.hg19.fasta.gz.md5
  ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/ucsc.hg19.stats.gz
  ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/ucsc.hg19.stats.gz.md5



[DEFAULT]
picard_path=
picard_path_comment=Path to picard jar files

gatk_path=
gatk_path_comment=Path to GATK jar file GenomeAnalysisTK.jar

opt_java=-Xmx4g -XX:-UseGCOverheadLimit
#

opt_mosaikbuild=

#
# -sam: sample name, obtained from output bam file name
# -st: sequencing technology: illumina
# -id: read group identifier
opt_read_group=-st illumina -mfl 500
	-sam ${CMD_OUTPUT: os.path.basename(CMD_OUTPUT[0]).rsplit('.', 1)[0]}
opt_read_group_comment=Read group options such as -cn (center name),
	-ds (description) -id (read group identifier) -ln (library name)
	-mfl (median fragment length) -pu (platform unit) -sam (sample name)
	and -st (sequencing technology) that will be passd to command
	MosaikBuild to specify read group tag. Default to -st illumina
	-sam where sample name is obtained from output bam filename.

opt_mosaikjump=-hs 15

opt_mosaikaligner=-hs 15 -mm 4 -mhp 100 -act 20
opt_mosaikaligner_comment=Parameters to MosaikAligner -hs (hash size) -mm
	(mismatch allowed) -mhp (maximum number of hash positions to be used 
	per seed)

opt_samtools_faidx=

opt_samtools_view=

opt_samtools_sort=

opt_samtools_index=

opt_picard_sortsam=VALIDATION_STRINGENCY=LENIENT
opt_picard_sortsam_comment=VALIDATION_STRINGENCY=LENIANT is used to correct an error
    caused by some versions of BWA, see http://seqanswers.com/forums/showthread.php?t=4246
    for details.

opt_picard_mergesamfiles=MAX_RECORDS_IN_RAM=5000000

opt_picard_samtofastq=VALIDATION_STRINGENCY=LENIENT NON_PF=true

opt_picard_markduplicates=
#
opt_gatk_realignertargetcreator=
# http://gatkforums.broadinstitute.org/discussion/1429/error-bam-file-has-a-read-with-mismatching-number-of-bases-and-base-qualities

opt_gatk_indelrealigner=--filter_mismatching_base_and_quals

opt_gatk_baserecalibrator=-rf BadCigar

opt_gatk_printreads=

opt_gatk_reducereads=

opt_gatk_haplotypecaller=-minPruning 3

opt_gatk_unifiedgenotyper=-rf BadCigar  -stand_call_conf 50.0 -stand_emit_conf 10.0  -dcov 200 -A AlleleBalance -A QualByDepth -A HaplotypeScore -A MappingQualityRankSumTest -A ReadPosRankSumTest -A FisherStrand -A RMSMappingQuality -A InbreedingCoeff -A Coverage

opt_gatk_variantrecalibrator=

opt_gatk_variantrecalibrator_snv= -percentBad 0.01 -minNumBad 1000 -an QD -an MQRankSum -an ReadPosRankSum -an FS -an DP

opt_gatk_variantrecalibrator_indel=--maxGaussians 4 -percentBad 0.01 -minNumBad 1000 -an DP -an FS -an ReadPosRankSum -an MQRankSum

opt_gatk_applyrecalibration=--ts_filter_level 99.9

opt_gatk_applyrecalibration_snv=

opt_gatk_applyrecalibration_indel=


[align_10]
# input = output = ${CMD_INPUT}
action=CheckCommands(['MosaikBuild', 'MosaikAligner', 'samtools', 'java'])
comment=Check existence of commands MosaikAlign, samtools and java

[align_20]
# input = output = ${CMD_INPUT}
action=CheckFiles(["%(picard_path)s/SortSam.jar", "%(gatk_path)s/GenomeAnalysisTK.jar"])
comment=Check existence of class files for Picard and GATK

[align_30]
# customized input and output 
input=${RESOURCE_DIR}/ucsc.hg19.fasta.gz
# this step will be ignored if output exists and newer than $INPUT
action=RunCommand('MosaikBuild -fr ucsc.hg19.fasta.gz -oa ucsc.hg19.fasta.dat}',
    working_dir='${RESOURCE_DIR}', 
    output='${RESOURCE_DIR}/ucsc.hg19.fasta.dat')
comment=Build Mosaik index for build hg19 of reference genome

[align_31]
# customized input and output 
input=${RESOURCE_DIR}/ucsc.hg19.fasta
# this step will be ignored if output exists and newer than $INPUT
action=RunCommand('MosaikJump -ia ${INPUT: INPUT[0] + ".dat"}
	%(opt_mosaikjump)s -out ${INPUT: INPUT[0] + "_15"}',
    working_dir='${RESOURCE_DIR}', 
    output='${RESOURCE_DIR}/ucsc.hg19.fasta_15')
comment=Build Mosaik index for build hg19 of reference genome

[align_40]
# customized input and output 
input=${RESOURCE_DIR}/ucsc.hg19.fasta
action=RunCommand('samtools faidx %(opt_samtools_faidx)s ${INPUT}',
    working_dir='${RESOURCE_DIR}',
    output='${RESOURCE_DIR}/ucsc.hg19.fasta.fai')
comment=Build samtools index for build hg19 of reference genome

[align_100]
# input is reset to command input ${CMD_INPUT}
input=${CMD_INPUT}
action=RunCommand("java %(opt_java)s -jar %(picard_path)s/SamToFastq.jar %(opt_picard_samtofastq)s
    INPUT=${INPUT} 
    FASTQ=${CACHE_DIR}/${INPUT: os.path.basename(INPUT[0]).rsplit('.', 1)[0] + '_1.fastq'}
    SECOND_END_FASTQ=${CACHE_DIR}/${INPUT: os.path.basename(INPUT[0]).rsplit('.', 1)[0] + '_2.fastq'}")
#
# This step is optional because it convert Sam files to fastq files (assuming
# paired). Non-sam files are passed directly to the next step.
#
input_emitter=EmitInput(select=['bam', 'sam'], pass_unselected=True)
comment=Convert bam files to paired fastq files if the input is in bam/sam format.
    Other input files are returned untouched.

[align_101]
# input is output of previous step ${OUTPUT100}
action=DecompressFiles(dest_dir="${CACHE_DIR}")
comment=Decompress all input files (.tgz2, .tar, .tar.gz, .gz, .tgz, .zip etc) to
    a cache directory. The original files are untouched if not compressed.

[align_200]
input=${OUTPUT101}
action=RunCommand(cmd=r"MosaikBuild 
		-q ${INPUT: INPUT[0]} 
		-q2 ${INPUT: INPUT[1]}
		%(opt_read_group)s
		-out ${CACHE_DIR}/${INPUT: os.path.basename(INPUT[0]) + '.mkb'}",
    output="${CACHE_DIR}/${INPUT: os.path.basename(INPUT[0]) + '.mkb'}")
input_emitter=EmitInput(group_by='paired')
comment=Running MosaikBuild to create mkb file

[align_300]
action=RunCommand(cmd=r"MosaikAligner
		-in ${INPUT}
		-out ${INPUT: INPUT[0][:-4] + '.mka'}
		-ia '${RESOURCE_DIR}/ucsc.hg19.fasta.dat'
		-j '${RESOURCE_DIR}/ucsc.hg19.fasta_15'
		%(opt_mosaikaligner)s
		",
    output="${INPUT: INPUT[0][:-4] + '.mka.bam'}")
input_emitter=EmitInput(group_by='paired')
comment=Running MosaikAlign to align reads to reference genome


[align_600]
action=RunCommand(cmd="java %(opt_java)s
        -jar %(picard_path)s/MarkDuplicates.jar 
        %(opt_picard_markduplicates)s 
        INPUT=${INPUT}
        OUTPUT=${INPUT: INPUT[0][:-4] + '_dedup.bam'}
        METRICS_FILE=${INPUT: INPUT[0][:-4] + '.metrics'}
        ASSUME_SORTED=true
        VALIDATION_STRINGENCY=LENIENT",
    output="${INPUT: INPUT[0][:-4] + '_dedup.bam'}")
comment=Mark duplicates

[align_610]
action=RunCommand(cmd="samtools index
        %(opt_samtools_index)s ${INPUT}",
    output="${INPUT: INPUT[0] + '.bai'}")
comment=index dedupped bam file

[align_700]
input=${OUTPUT600}
action=RunCommand(cmd="java %(opt_java)s
        -jar %(gatk_path)s/GenomeAnalysisTK.jar
        -T RealignerTargetCreator
        %(opt_gatk_realignertargetcreator)s
        -I ${INPUT}
        -R ${RESOURCE_DIR}/ucsc.hg19.fasta
        --mismatchFraction 0.0
        -o ${INPUT: INPUT[0][:-4] + '.IndelRealignerTarget.intervals'}
        -known ${RESOURCE_DIR}/dbsnp_137.hg19.vcf
        -known ${RESOURCE_DIR}/hapmap_3.3.hg19.vcf
        -known ${RESOURCE_DIR}/1000G_omni2.5.hg19.vcf
        -known ${RESOURCE_DIR}/Mills_and_1000G_gold_standard.indels.hg19.vcf
        -known ${RESOURCE_DIR}/1000G_phase1.indels.hg19.vcf",
    output="${INPUT: INPUT[0][:-4] + '.IndelRealignerTarget.intervals'}")
comment=Realign indels create indel realigner target

[align_710]
# input is still the bam file, not the realigner tager intervals
input=${OUTPUT600}
action=RunCommand(cmd="java %(opt_java)s 
        -jar %(gatk_path)s/GenomeAnalysisTK.jar 
        -T IndelRealigner 
        %(opt_gatk_indelrealigner)s 
        -I ${INPUT}
        -R ${RESOURCE_DIR}/ucsc.hg19.fasta
        --targetIntervals ${INPUT: INPUT[0][:-4] + '.IndelRealignerTarget.intervals'}
        --consensusDeterminationModel USE_READS
        -compress 0 
        -o ${INPUT: INPUT[0][:-4] + '.clean.bam'}
        -known ${RESOURCE_DIR}/dbsnp_137.hg19.vcf
        -known ${RESOURCE_DIR}/hapmap_3.3.hg19.vcf
        -known ${RESOURCE_DIR}/1000G_omni2.5.hg19.vcf
        -known ${RESOURCE_DIR}/Mills_and_1000G_gold_standard.indels.hg19.vcf
        -known ${RESOURCE_DIR}/1000G_phase1.indels.hg19.vcf",
    output="${INPUT: INPUT[0][:-4] + '.clean.bam'}")
comment=Apply indel realigner target to bam file

[align_800]
action=RunCommand(cmd="java %(opt_java)s 
        -jar %(gatk_path)s/GenomeAnalysisTK.jar 
        -T BaseRecalibrator
        %(opt_gatk_baserecalibrator)s
        -I ${INPUT}
        -R ${RESOURCE_DIR}/ucsc.hg19.fasta
        -cov ReadGroupCovariate
        -cov QualityScoreCovariate
        -cov CycleCovariate
        -cov ContextCovariate
        -o ${INPUT: INPUT[0][:-4] + '.grp'}
        -knownSites ${RESOURCE_DIR}/dbsnp_137.hg19.vcf
        -knownSites ${RESOURCE_DIR}/hapmap_3.3.hg19.vcf
        -knownSites ${RESOURCE_DIR}/1000G_omni2.5.hg19.vcf
        -knownSites ${RESOURCE_DIR}/Mills_and_1000G_gold_standard.indels.hg19.vcf
        -knownSites ${RESOURCE_DIR}/1000G_phase1.indels.hg19.vcf",
    output="${INPUT: INPUT[0][:-4] + '.grp'}")
comment=Create base recalibrator target

[align_810]
input=${OUTPUT710}
action=RunCommand(cmd="java %(opt_java)s 
        -jar %(gatk_path)s/GenomeAnalysisTK.jar 
        -T PrintReads
        %(opt_gatk_printreads)s
        -I ${INPUT}
        -R ${RESOURCE_DIR}/ucsc.hg19.fasta
        -BQSR ${INPUT: INPUT[0][:-4] + '.grp'}
        -o ${CMD_OUTPUT: CMD_OUTPUT[0]}",
    output="${CMD_OUTPUT: CMD_OUTPUT[0]}")
comment=Apply base recalibrator target

[align_900]
# if there are more than 1 output file, emit input file for further processing
# output file is specifed as the second command output
action=RunCommand(cmd="java %(opt_java)s
        -jar %(gatk_path)s/GenomeAnalysisTK.jar
        -T ReduceReads
        %(opt_gatk_reducereads)s
        -I ${INPUT} 
        -R ${RESOURCE_DIR}/ucsc.hg19.fasta
        -o ${CMD_OUTPUT: CMD_OUTPUT[1]}",
    output="${CMD_OUTPUT: CMD_OUTPUT[1]}")
input_emitter=EmitInput(select=${CMD_OUTPUT: len(CMD_OUTPUT) > 1})
comment=Generated bam file with reduced reads if more than one output file is specified

[call_20]
# input = output = ${CMD_INPUT}
action=CheckFiles("%(gatk_path)s/GenomeAnalysisTK.jar")
comment=Check existence of class files for GATK


[call_100]
action=RunCommand(cmd="java %(opt_java)s
        -jar %(gatk_path)s/GenomeAnalysisTK.jar
        -T UnifiedGenotyper 
        %(opt_gatk_unifiedgenotyper)s 
        -I ${INPUT} 
        -R ${RESOURCE_DIR}/ucsc.hg19.fasta
        --dbsnp ${RESOURCE_DIR}/dbsnp_137.hg19.vcf
        --genotype_likelihoods_model BOTH 
        -o ${CACHE_DIR}/${INPUT: INPUT[0][:-4] + '_raw.vcf'}",
    output="${CACHE_DIR}/${INPUT: INPUT[0][:-4] + '_raw.vcf'}")
# make sure the input is a bam file
input_emitter=EmitInput(select='.bam')
comment=Use unified genotyper to get raw variants


[call_200]
action=RunCommand(cmd="java %(opt_java)s
        -jar %(gatk_path)s/GenomeAnalysisTK.jar
        -I ${INPUT} 
        -T VariantRecalibrator
        -R ${RESOURCE_DIR}/ucsc.hg19.fasta
        %(opt_gatk_variantrecalibrator)s
        %(opt_gatk_variantrecalibrator_SNV)s
        -resource:hapmap,known=false,training=true,truth=true,prior=15.0 ${RESOURCE_DIR}/hapmap_3.3.hg19.vcf
        -resource:omni,known=false,training=true,truth=true,prior=12.0	${RESOURCE_DIR}/1000G_omni2.5.hg19.vcf
        -resource:dbsnp,known=true,training=false,truth=false,prior=2.0	${RESOURCE_DIR}/dbsnp_137.hg19.vcf
        -mode SNP 
        -recalFile ${INPUT: INPUT[0][:-4] + '.SNPs.recal'}
        -tranchesFile ${INPUT: INPUT[0][:-4] + '.SNPs.tranches'}
        -rscriptFile ${INPUT: INPUT[0][:-4] + '.SNPs.R'}
        -log ${INPUT: INPUT[0][:-4] + '.SNPs.log'",
    output=["${INPUT: INPUT[0][:-4] + '.SNPs.recal'}",
        "${INPUT: INPUT[0][:-4] + '.SNPs.tranches'}",
        "${INPUT: INPUT[0][:-4] + '.SNPs.R'}",
        "${INPUT: INPUT[0][:-4] + '.SNPs.log'}"])
comment=Recalibrate SNPs
                
[call_210]
# use the same .vcf file, not the output files of the SNP recalibration step
input=${OUTPUT100}
action=RunCommand(cmd="java %(opt_java)s
        -jar %(gatk_path)s/GenomeAnalysisTK.jar
        -I ${INPUT} 
        -T VariantRecalibrator
        -R ${RESOURCE_DIR}/ucsc.hg19.fasta
        %(opt_gatk_variantrecalibrator)s
        %(opt_gatk_variantrecalibrator_INDEL)s
        -resource:mills,known=false,training=true,truth=true,prior=12.0 
            ${RESOURCE_DIR}/Mills_and_1000G_gold_standard.indels.hg19.vcf
        -resource:dbsnp,known=true,training=false,truth=false,prior=2.0 
            ${RESOURCE_DIR}/dbsnp_137.hg19.vcf
        -mode INDEL 
        -recalFile ${INPUT: INPUT[0][:-4] + '.INDELs.recal'}
        -tranchesFile ${INPUT: INPUT[0][:-4] + '.INDELs.tranches'}
        -rscriptFile ${INPUT: INPUT[0][:-4] + '.INDELs.R'}
        -log ${INPUT: INPUT[0][:-4] + '.INDELs.log'",
    output=["${INPUT: INPUT[0][:-4] + '.INDELs.recal'}",
        "${INPUT: INPUT[0][:-4] + '.INDELs.tranches'}",
        "${INPUT: INPUT[0][:-4] + '.INDELs.R'}",
        "${INPUT: INPUT[0][:-4] + '.INDELs.log'}"])
comment=Recalibrate INDELs

[call_300]
input=${OUTPUT100}
action=RunCommand(cmd="java %(opt_java)s
        -jar GenomeAnalysisTK.jar 
        -T ApplyRecalibration
        %(opt_gatk_applyrecalibration)s
        %(opt_gatk_applyrecalibration_SNV)s
        --input ${INPUT}
        -R ${RESOURCE_DIR}/ucsc.hg19.fasta
        -mode SNP 
        -recalFile ${INPUT: INPUT[0][:-4] + '.SNVs.recal'}
        -tranchesFile ${INPUT: INPUT[0][:-4] + '.SNVs.tranches'}
        -o ${INPUT: INPUT[0][:-4] + '.recal.SNPs.vcf'}",
    output="${INPUT: INPUT[0][:-4] + '.recal.SNPs.vcf'}")
comment=Apply SNV recalibration

[call_310]
# use input from last step (.recal.SNPs.vcf)
action=RunCommand(cmd="java %(opt_java)s
        -jar GenomeAnalysisTK.jar 
        -T ApplyRecalibration
        %(opt_gatk_applyrecalibration)s
        %(opt_gatk_applyrecalibration_INDEL)s
        --input ${INPUT}
        -R ${RESOURCE_DIR}/ucsc.hg19.fasta
        -mode INDEL
        -recalFile ${INPUT: INPUT[0][:-4] + '.INDELs.recal'}
        -tranchesFile ${INPUT: INPUT[0][:-4] + '.INDELs.tranches'}
        -o ${CMD_OUTPUT}",
    output="${CMD_OUTPUT}")
comment=Apply INDEL recalibration

