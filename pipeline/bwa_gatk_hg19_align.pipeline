# Copyright (C) 2011 - 2013 Bo Peng (bpeng@mdanderson.org)
# Distributed under GPL. see <http://www.gnu.org/licenses/>
#
# Please refer to http://varianttools.sourceforge.net/Pipeline/New for
# a description of the format of this file.

[pipeline description]
description=A pipeline to align raw reads from fastq or BAW/SAM files using BWA
  and GATK best practice. It uses hg19 of human reference genome and assumes
  paired-end reads in plain text and compressed formats. Reduced bam files
  are produced if more than one output files are specified.
#
# resource_directory is set to ~/.variant_tools/pipeline_resource/gatk23_hg19
RESOURCE_DIR=${LOCAL_RESOURCE}/pipeline_resource/gatk23_hg19

[DEFAULT]
strict_prog_version=True
strict_prog_version_comment=Whether or not use other version of programs if the exact version does not
	exist. Setting it to False allows variant tools to use other versions of the programs.

bwa=bwa
bwa_comment=path to bwa. Default to 'bwa' (use $PATH to determine actual path)

samtools=samtools
samtools_comment=path to samtools. Default to 'samtools' (use $PATH to determine actual path)

java=java
java_comment=path to java. Default to 'java' (use $PATH to determine actual path)

picard_path=
picard_path_comment=Path to picard jar files

gatk_path=
gatk_path_comment=Path to GATK jar file GenomeAnalysisTK.jar

opt_java=-Xmx4g -XX:-UseGCOverheadLimit
opt_java_comment=Option to java program. -Djava.io.tmpdir is frequently used to set java
	temporary directory if system temporary partition is not big enough.

opt_bwa_index=
opt_bwa_index_comment=Option to command 'bwa index'

opt_bwa_aln=
opt_bwa_aln_comment=Option to command 'bwa aln'

opt_bwa_sampe=
opt_bwa_sampe_comment=Option to command 'bwa sampe'

opt_samtools_faidx=
opt_samtools_faidx_comment=Option to command 'samtools faidx'

opt_samtools_index=
opt_samtools_index_comment=Option to command 'samtools index'

opt_picard_sortsam=VALIDATION_STRINGENCY=LENIENT
opt_picard_sortsam_comment=Option to picard SortSam.jar

opt_picard_mergesamfiles=MAX_RECORDS_IN_RAM=5000000
opt_picard_mergesamfiles_comment=Option to picard MergeSamFiles.jar

opt_picard_samtofastq=VALIDATION_STRINGENCY=LENIENT NON_PF=true
opt_picard_samtofastq_comment=Option to picard SamToFastq.jar

opt_picard_markduplicates=
opt_picard_markduplicates_comment=Option to picard MarkDuplicates.jar
#
opt_gatk_realignertargetcreator=
opt_gatk_realignertargetcreator_comment=Option to command gatk RealignerTargetCreator

opt_gatk_indelrealigner=--filter_mismatching_base_and_quals
opt_gatk_indelrealigner_comment=Option to command gatk IndelRealigner

opt_gatk_baserecalibrator=-rf BadCigar
opt_gatk_baserecalibrator_comment=Option to command gatk BaseRecalibrator

opt_gatk_printreads=
opt_gatk_printreads_comment=Option to command gatk PrintReads

opt_gatk_reducereads=
opt_gatk_reducereads_comment=Option to command gatk ReduceReads


[step_0]
# resources are downloaded from ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/*
# the .gz files will be automatically decompressed
action=DownloadResource(resource='ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/1000G_omni2.5.hg19.vcf.gz
    ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/1000G_omni2.5.hg19.vcf.gz.md5
    ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/1000G_omni2.5.hg19.vcf.idx.gz
    ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/1000G_omni2.5.hg19.vcf.idx.gz.md5
    ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/1000G_phase1.indels.hg19.vcf.gz
    ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/1000G_phase1.indels.hg19.vcf.gz.md5
    ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/1000G_phase1.indels.hg19.vcf.idx.gz
    ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/1000G_phase1.indels.hg19.vcf.idx.gz.md5
    ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/dbsnp_137.hg19.excluding_sites_after_129.vcf.gz
    ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/dbsnp_137.hg19.excluding_sites_after_129.vcf.gz.md5
    ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/dbsnp_137.hg19.excluding_sites_after_129.vcf.idx.gz
    ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/dbsnp_137.hg19.excluding_sites_after_129.vcf.idx.gz.md5
    ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/dbsnp_137.hg19.vcf.gz
    ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/dbsnp_137.hg19.vcf.gz.md5
    ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/dbsnp_137.hg19.vcf.idx.gz
    ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/dbsnp_137.hg19.vcf.idx.gz.md5
    ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/hapmap_3.3.hg19.vcf.gz
    ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/hapmap_3.3.hg19.vcf.gz.md5
    ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/hapmap_3.3.hg19.vcf.idx.gz
    ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/hapmap_3.3.hg19.vcf.idx.gz.md5
    ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/Mills_and_1000G_gold_standard.indels.hg19.vcf.gz
    ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/Mills_and_1000G_gold_standard.indels.hg19.vcf.gz.md5
    ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/Mills_and_1000G_gold_standard.indels.hg19.vcf.idx.gz
    ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/Mills_and_1000G_gold_standard.indels.hg19.vcf.idx.gz.md5
    ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/NA12878.HiSeq.WGS.bwa.cleaned.raw.subset.hg19.sites.vcf.gz
    ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/NA12878.HiSeq.WGS.bwa.cleaned.raw.subset.hg19.sites.vcf.gz.md5
    ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/NA12878.HiSeq.WGS.bwa.cleaned.raw.subset.hg19.sites.vcf.idx.gz
    ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/NA12878.HiSeq.WGS.bwa.cleaned.raw.subset.hg19.sites.vcf.idx.gz.md5
    ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/NA12878.HiSeq.WGS.bwa.cleaned.raw.subset.hg19.vcf.gz
    ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/NA12878.HiSeq.WGS.bwa.cleaned.raw.subset.hg19.vcf.gz.md5
    ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/NA12878.HiSeq.WGS.bwa.cleaned.raw.subset.hg19.vcf.idx.gz
    ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/NA12878.HiSeq.WGS.bwa.cleaned.raw.subset.hg19.vcf.idx.gz.md5
    ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/ucsc.hg19.dict.gz
    ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/ucsc.hg19.dict.gz.md5
    ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/ucsc.hg19.fasta.gz
    ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/ucsc.hg19.fasta.gz.md5
    ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/ucsc.hg19.stats.gz
    ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.3/hg19/ucsc.hg19.stats.gz.md5',
    resource_dir="${RESOURCE_DIR}")
comment=Download required resources to resource directory

[step_10]
# input = output = ${CMD_INPUT}
action=CheckCommands(['%(bwa)s', '%(samtools)s', '%(java)s'])
comment=Check existence of commands bwa, samtools and java

[step_11]
action=CheckOutput('%(bwa)s', 'Version: 0.7.*', %(strict_prog_version)s)
comment=Check if the version of bwa. Version is 0.7.4 is recommended

[step_12]
action=CheckOutput('ls %(picard_path)s/picard*.jar', 'picard-1.82', %(strict_prog_version)s)
comment=Check if the version of picard. Version is 1.82 is recommended.

[step_13]
action=CheckOutput('%(java)s -jar %(gatk_path)s/GenomeAnalysisTK.jar -version', '^2.4', %(strict_prog_version)s)
comment=Check the version of GATK. Version 2.4 is recommended.

[step_20]
# input = output = ${CMD_INPUT}
action=CheckFiles(["%(picard_path)s/SortSam.jar", "%(gatk_path)s/GenomeAnalysisTK.jar"])
comment=Check existence of class files for Picard and GATK

[step_30]
# customized input and output 
input=${RESOURCE_DIR}/ucsc.hg19.fasta
# this step will be ignored if output exists and newer than $INPUT
action=RunCommand('%(bwa)s index %(opt_bwa_index)s -a bwtsw ${INPUT}',
    working_dir='${RESOURCE_DIR}', 
    output='${RESOURCE_DIR}/ucsc.hg19.fasta.amb')
comment=Build bwa index for build hg19 of reference genome

[step_40]
# customized input and output 
input=${RESOURCE_DIR}/ucsc.hg19.fasta
action=RunCommand('%(samtools)s faidx %(opt_samtools_faidx)s ${INPUT}',
    working_dir='${RESOURCE_DIR}',
    output='${RESOURCE_DIR}/ucsc.hg19.fasta.fai')
comment=Build samtools index for build hg19 of reference genome

[step_100]
# input is reset to command input ${CMD_INPUT}
# This step is optional because it convert Sam files to fastq files (assuming
# paired). Non-sam files are passed directly to the next step.
input=${CMD_INPUT}
action=RunCommand("%(java)s %(opt_java)s -jar %(picard_path)s/SamToFastq.jar %(opt_picard_samtofastq)s
    INPUT=${INPUT} 
    FASTQ=${CACHE_DIR}/${INPUT: os.path.basename(INPUT[0]).rsplit('.', 1)[0] + '_1.fastq'}
    SECOND_END_FASTQ=${CACHE_DIR}/${INPUT: os.path.basename(INPUT[0]).rsplit('.', 1)[0] + '_2.fastq'}")
input_emitter=EmitInput(select=['bam', 'sam'], pass_unselected=True)
comment=Convert bam files to paired fastq files if the input is in bam/sam format.
    Other input files are returned untouched.

[step_101]
# input is output of previous step ${OUTPUT100}
action=DecompressFiles(dest_dir="${CACHE_DIR}"), LinkToDir('${CACHE_DIR}')
comment=Decompress all input files (.tgz2, .tar, .tar.gz, .gz, .tgz, .zip etc) to
    a cache directory. Uncompressed files are hard-linked to the cache directory.

[step_200]
# input of ${OUTPUT101}, which is a list of fastq files
action=CheckFastqVersion(output="${INPUT: INPUT[0] + '.aln_param'}")
# remove all non-fastq files that might have been inputted
input_emitter=EmitInput(select='fastq', pass_unselected=False)
comment=Check the format of the input fastq file and write an option file
    with option -I if the sequences are in Illumina 1.3+ format.

[step_201]
# cannot use output of step align200, because we need a list of fastq files
input=${OUTPUT101}
action=RunCommand(cmd='%(bwa)s aln 
        ${INPUT: open(INPUT[0] + ".aln_param").read().strip()}
        %(opt_bwa_aln)s -t 4 ${RESOURCE_DIR}/ucsc.hg19.fasta 
        ${INPUT} > ${INPUT: INPUT[0] + '.sai'}',
    output="${INPUT: INPUT[0] + '.sai'}")
# remove all non-fastq files that might have been inputted
input_emitter=EmitInput(select='fastq', pass_unselected=False)
comment=Call bwa aln to produce .sai files

[step_300]
# produce a usable read group name
input=${OUTPUT101}
# read group is guessed from input and output file names
action=GuessReadGroup(bamfile="${CMD_OUTPUT}",
    rgfile="${INPUT: INPUT[0] + '.RG'}")
input_emitter=EmitInput(group_by='paired')
comment=Determine (guess) a read group tag and write to a .RG file.

[step_301]
# cannot use output of step align201, because we need a list of fastq files
input=${OUTPUT101}
# cmd=r" " is needed because there are \t in the readgroup string
action=RunCommand(cmd=r"%(bwa)s sampe %(opt_bwa_sampe)s
        -r '${INPUT: open(INPUT[0] + ".RG").read().strip()}'
        ${RESOURCE_DIR}/ucsc.hg19.fasta 
        ${INPUT: INPUT[0] + '.sai'} ${INPUT: INPUT[1] + '.sai'}
        ${INPUT: INPUT[0]} ${INPUT: INPUT[1]} > ${INPUT: INPUT[0] + '.sam'}",
    output="${INPUT: INPUT[0] + '.sam'}")
input_emitter=EmitInput(group_by='paired')
comment=Running bwa sampe for paired end reads, using read group tag saved
    in a .RG file

[step_302]
action=CountMappedReads(output="${INPUT: INPUT[0] + '.counts'}", cutoff=0.8)
comment=Check the proportion of aligned reads and exit if there are less than
    80% of aligned reads.

[step_400]
input=${OUTPUT301}
action=RunCommand(cmd="%(java)s %(opt_java)s -jar %(picard_path)s/MergeSamFiles.jar
        %(opt_picard_mergesamfiles)s ${INPUT: ' '.join(INPUT)}
        USE_THREADING=true
        VALIDATION_STRINGENCY=LENIENT
        ASSUME_SORTED=true
        OUTPUT=${INPUT: INPUT[0][:-4] + '_merged.bam'}",
    output="${INPUT: INPUT[0][:-4] + '_merged.bam'}")
# if there is only one input file, skip this step and pass the input to output
input_emitter=EmitInput(select=${INPUT400:len(INPUT400)>1}, group_by="all")
comment=Merge per-lane sam files into a single bam file. This step is skipped
	if there is only one input file.

[step_500]
action=RunCommand(cmd="%(java)s %(opt_java)s 
        -jar %(picard_path)s/SortSam.jar 
        %(opt_picard_sortsam)s I=${INPUT}
        O=${INPUT: INPUT[0][:-4] + '_sorted.bam'} SO=coordinate",
    output="${INPUT: INPUT[0][:-4] + '_sorted.bam'}")
comment=Sort merged bam file using picard SortSam

[step_600]
action=RunCommand(cmd="%(java)s %(opt_java)s
        -jar %(picard_path)s/MarkDuplicates.jar 
        %(opt_picard_markduplicates)s 
        INPUT=${INPUT}
        OUTPUT=${INPUT: INPUT[0][:-4] + '_dedup.bam'}
        METRICS_FILE=${INPUT: INPUT[0][:-4] + '.metrics'}
        ASSUME_SORTED=true
        VALIDATION_STRINGENCY=LENIENT",
    output="${INPUT: INPUT[0][:-4] + '_dedup.bam'}")
comment=Mark duplicates using picard MarkDuplicates command

[step_610]
action=RunCommand(cmd="%(samtools)s index
        %(opt_samtools_index)s ${INPUT}",
    output="${INPUT: INPUT[0] + '.bai'}")
comment=Index dedupped bam file using samtools

[step_700]
input=${OUTPUT600}
action=RunCommand(cmd="%(java)s %(opt_java)s
        -jar %(gatk_path)s/GenomeAnalysisTK.jar
        -T RealignerTargetCreator
        %(opt_gatk_realignertargetcreator)s
        -I ${INPUT}
        -R ${RESOURCE_DIR}/ucsc.hg19.fasta
        --mismatchFraction 0.0
        -o ${INPUT: INPUT[0][:-4] + '.IndelRealignerTarget.intervals'}
        -known ${RESOURCE_DIR}/dbsnp_137.hg19.vcf
        -known ${RESOURCE_DIR}/hapmap_3.3.hg19.vcf
        -known ${RESOURCE_DIR}/1000G_omni2.5.hg19.vcf
        -known ${RESOURCE_DIR}/Mills_and_1000G_gold_standard.indels.hg19.vcf
        -known ${RESOURCE_DIR}/1000G_phase1.indels.hg19.vcf",
    output="${INPUT: INPUT[0][:-4] + '.IndelRealignerTarget.intervals'}")
comment=Realign indels create indel realigner target

[step_710]
# input is still the bam file, not the realigner tager intervals
input=${OUTPUT600}
action=RunCommand(cmd="%(java)s %(opt_java)s 
        -jar %(gatk_path)s/GenomeAnalysisTK.jar 
        -T IndelRealigner 
        %(opt_gatk_indelrealigner)s 
        -I ${INPUT}
        -R ${RESOURCE_DIR}/ucsc.hg19.fasta
        --targetIntervals ${INPUT: INPUT[0][:-4] + '.IndelRealignerTarget.intervals'}
        --consensusDeterminationModel USE_READS
        -compress 0 
        -o ${INPUT: INPUT[0][:-4] + '.clean.bam'}
        -known ${RESOURCE_DIR}/dbsnp_137.hg19.vcf
        -known ${RESOURCE_DIR}/hapmap_3.3.hg19.vcf
        -known ${RESOURCE_DIR}/1000G_omni2.5.hg19.vcf
        -known ${RESOURCE_DIR}/Mills_and_1000G_gold_standard.indels.hg19.vcf
        -known ${RESOURCE_DIR}/1000G_phase1.indels.hg19.vcf",
    output="${INPUT: INPUT[0][:-4] + '.clean.bam'}")
comment=Apply indel realigner target to bam file

[step_800]
action=RunCommand(cmd="%(java)s %(opt_java)s 
        -jar %(gatk_path)s/GenomeAnalysisTK.jar 
        -T BaseRecalibrator
        %(opt_gatk_baserecalibrator)s
        -I ${INPUT}
        -R ${RESOURCE_DIR}/ucsc.hg19.fasta
        -cov ReadGroupCovariate
        -cov QualityScoreCovariate
        -cov CycleCovariate
        -cov ContextCovariate
        -o ${INPUT: INPUT[0][:-4] + '.grp'}
        -knownSites ${RESOURCE_DIR}/dbsnp_137.hg19.vcf
        -knownSites ${RESOURCE_DIR}/hapmap_3.3.hg19.vcf
        -knownSites ${RESOURCE_DIR}/1000G_omni2.5.hg19.vcf
        -knownSites ${RESOURCE_DIR}/Mills_and_1000G_gold_standard.indels.hg19.vcf
        -knownSites ${RESOURCE_DIR}/1000G_phase1.indels.hg19.vcf",
    output="${INPUT: INPUT[0][:-4] + '.grp'}")
comment=Create base recalibrator target

[step_810]
input=${OUTPUT710}
action=RunCommand(cmd="%(java)s %(opt_java)s 
        -jar %(gatk_path)s/GenomeAnalysisTK.jar 
        -T PrintReads
        %(opt_gatk_printreads)s
        -I ${INPUT}
        -R ${RESOURCE_DIR}/ucsc.hg19.fasta
        -BQSR ${INPUT: INPUT[0][:-4] + '.grp'}
        -o ${CMD_OUTPUT: CMD_OUTPUT[0]}",
    output="${CMD_OUTPUT: CMD_OUTPUT[0]}")
comment=Apply base recalibrator target

[step_900]
# if there are more than 1 output file, emit input file for further processing
# output file is specifed as the second command output
action=RunCommand(cmd="%(java)s %(opt_java)s
        -jar %(gatk_path)s/GenomeAnalysisTK.jar
        -T ReduceReads
        %(opt_gatk_reducereads)s
        -I ${INPUT} 
        -R ${RESOURCE_DIR}/ucsc.hg19.fasta
        -o ${CMD_OUTPUT: CMD_OUTPUT[1]}",
    output="${CMD_OUTPUT: CMD_OUTPUT[1]}")
input_emitter=EmitInput(select=${CMD_OUTPUT: len(CMD_OUTPUT) > 1})
comment=Generated bam file with reduced reads if more than one output file
	is specified


